var c=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var v=(r,e)=>{for(var i in e)s(r,i,{get:e[i],enumerable:!0})},l=(r,e,i,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of b(e))!w.call(r,n)&&n!==i&&s(r,n,{get:()=>e[n],enumerable:!(t=p(e,n))||t.enumerable});return r};var a=(r,e,i)=>(i=r!=null?c(N(r)):{},l(e||!r||!r.__esModule?s(i,"default",{value:r,enumerable:!0}):i,r)),B=r=>l(s({},"__esModule",{value:!0}),r);var y={};v(y,{Rounding:()=>u,parseBigNumberish:()=>x});module.exports=B(y);var o=a(require("bn.js"));var g=require("lodash");var f=class{constructor(e){this.logLevel=e.logLevel!==void 0?e.logLevel:0,this.name=e.name}set level(e){this.logLevel=e}get time(){return Date.now().toString()}get moduleName(){return this.name}isLogLevel(e){return e<=this.logLevel}error(...e){return this.isLogLevel(0)?(console.error(this.time,this.name,"sdk logger error",...e),this):this}logWithError(...e){let i=e.map(t=>typeof t=="object"?JSON.stringify(t):t).join(", ");throw new Error(i)}warning(...e){return this.isLogLevel(1)?(console.warn(this.time,this.name,"sdk logger warning",...e),this):this}info(...e){return this.isLogLevel(2)?(console.info(this.time,this.name,"sdk logger info",...e),this):this}debug(...e){return this.isLogLevel(3)?(console.debug(this.time,this.name,"sdk logger debug",...e),this):this}},h={},E={};function m(r){let e=(0,g.get)(h,r);if(!e){let i=(0,g.get)(E,r);e=new f({name:r,logLevel:i}),(0,g.set)(h,r,e)}return e}var u=(t=>(t[t.ROUND_DOWN=0]="ROUND_DOWN",t[t.ROUND_HALF_UP=1]="ROUND_HALF_UP",t[t.ROUND_UP=2]="ROUND_UP",t))(u||{}),L=9007199254740991;function x(r){let e=m("CobaltX_parseBigNumberish");if(r instanceof o.default)return r;if(typeof r=="string"){if(r.match(/^-?[0-9]+$/))return new o.default(r);e.logWithError(`invalid BigNumberish string: ${r}`)}return typeof r=="number"?(r%1&&e.logWithError(`BigNumberish number underflow: ${r}`),(r>=L||r<=-L)&&e.logWithError(`BigNumberish number overflow: ${r}`),new o.default(String(r))):typeof r=="bigint"?new o.default(r.toString()):(e.error(`invalid BigNumberish value: ${r}`),new o.default(0))}0&&(module.exports={Rounding,parseBigNumberish});
//# sourceMappingURL=constant.js.map